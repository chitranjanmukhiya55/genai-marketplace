"use client"
import { Poppins } from "next/font/google";
import "./globals.css";
import "@/styles/index.scss";
import "rc-slider/assets/index.css";
import Footer from "@/shared/Footer/Footer";
// import MusicPlayer from "@/components/MusicPlayer/MusicPlayer";
import SiteHeader from "@/app/SiteHeader";
import { ToolkitProvider } from "@/redux/toolKitProviders";

import { ToastContainer, toast } from "react-toastify"
import "react-toastify/dist/ReactToastify.css"
import ProtectedRoute from "@/components/ProtectedRoute";

import { useRouter } from "next/navigation"
import { usePathname } from "next/navigation"
import { getCookie, setCookie } from "@/utils/itemConfig"
import axios from "axios"
import { QueryClient, useQueryClient } from "react-query"

import { ReactQueryProvider } from "@/components/ReactQueryProvider"
import { useEffect } from "react";

const poppins = Poppins({
  subsets: ["latin"],
  display: "swap",
  weight: ["300", "400", "500", "600", "700"],
});

// export const metadata = {
//   title: "Gen AI Market Place",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { push } = useRouter()
  const router: any = useRouter()
  const pathname = usePathname()
  const queryClient = new QueryClient()
  useEffect(() => {
    const getNewAccessToken = async (token: string) => {
      try {
        const response = await axios.post(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/getNewAccessToken`,
          { refreshToken: token }
        )
        localStorage.setItem("user", JSON.stringify(response.data.user))
        const { accessToken } = response.data
        if (accessToken) setCookie("accessToken", accessToken, 8000, "/")
      } catch (error) {
        console.error("Error refreshing access token:", error)
      }
    }

    const refreshToken = getCookie("refreshToken")

    if (refreshToken === undefined || refreshToken === null || refreshToken === 'undefined') {
      if (pathname !== "/signup" && pathname !== "/forgot-password" && pathname !== "/otp-authentication") {
        router.push("/signin")
      }
    } else {
      getNewAccessToken(refreshToken!)
    }
  }, [push, queryClient])

  useEffect(() => {
    const refreshToken = getCookie("refreshToken")

    const getNewAccessToken = async (token: string) => {
      try {
        const response = await axios.post(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/auth/getNewAccessToken`,
          { refreshToken: getCookie("refreshToken") }
        )
        localStorage.setItem("user", JSON.stringify(response.data.user))
        const { accessToken } = response.data
        if (accessToken) setCookie("accessToken", accessToken, 8000, "/")
      } catch (error) {
        console.error("Error refreshing access token:", error)
      }
    }
    if (refreshToken === undefined || refreshToken === null) {
      if (pathname !== "/signup") {
        router.push("/signin")
      }
    } else {
      getNewAccessToken(refreshToken!)
    }
    getNewAccessToken(getCookie("refreshToken")!);
    const interval = setInterval(getNewAccessToken, 8 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);
  return (

    <html lang="en" className={poppins.className}>
      <body className="bg-white text-base dark:bg-neutral-900 text-neutral-900 dark:text-neutral-200">
       
        <ToolkitProvider>
          <ReactQueryProvider> 
            <SiteHeader />
            {children}
          </ReactQueryProvider>
           <Footer />
        </ToolkitProvider>
       
        <ToastContainer
          position="bottom-right"
          autoClose={3000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="dark"
        />
      </body>
    </html>

  );
}


